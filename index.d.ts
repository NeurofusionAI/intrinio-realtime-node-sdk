declare class IntrinioRealtime {
    constructor(accessKey: any, onTrade: any, onQuote: any, config?: {});
    _accessKey: any;
    _config: any;
    _token: string;
    _websocket: any;
    _isReady: boolean;
    _attemptingReconnect: boolean;
    _lastReset: number;
    _msgCount: number;
    _channels: any;
    _onTrade: any;
    _onQuote: any;
    _float32Array: Float32Array;
    _backingByteArray: Uint8Array;
    _getAuthUrl(): string;
    _getWebSocketUrl(): string;
    _getMessageType(val: any): "" | "Trade" | "Ask" | "Bid";
    _getSubProvider(val: any): "NASDAQ_BASIC" | "NONE" | "CTA_A" | "CTA_B" | "UTP" | "OTC" | "IEX";
    _parseTrade(bytes: any): {
        Type: string;
        Symbol: string;
        Price: number;
        Size: any;
        Timestamp: any;
        TotalVolume: any;
        SubProvider: string;
        MarketCenter: string;
        Condition: string;
    };
    _parseQuote(bytes: any): {
        Type: string;
        Symbol: string;
        Price: number;
        Size: any;
        Timestamp: any;
        SubProvider: string;
        MarketCenter: string;
        Condition: string;
    };
    _parseSocketMessage(data: any): void;
    _trySetToken(): any;
    _makeJoinMessage(tradesOnly: any, symbol: any): Uint8Array;
    _makeLeaveMessage(symbol: any): Uint8Array;
    _resetWebsocket(): any;
    _isReconnecting: boolean;
    _join(symbol: any, tradesOnly: any): void;
    _leave(symbol: any): void;
    join(symbols: any, tradesOnly: any): Promise<void>;
    leave(symbols: any, ...args: any[]): void;
    stop(): Promise<void>;
    getTotalMsgCount(): number;
}
declare class IntrinioRealtimeReplayClient {
    constructor(accessKey: any, onTrade: any, onQuote: any, config?: {});
    _accessKey: any;
    _config: any;
    _msgCount: number;
    _channels: any;
    _onTrade: any;
    _onQuote: any;
    _float32Array: Float32Array;
    _backingByteArray: Uint8Array;
    _getAllApiDownloadResponses(urls: any): Promise<any[]>;
    _getAllFilePaths(responses: any): Promise<any[]>;
    _deleteReplayFiles(filePaths: any): void;
    _getAllFileIterators(filePaths: any): Promise<{}[]>;
    _getAggregateTickIterator(fileGroup: any): Promise<{}>;
    _start(): Promise<void>;
    _decodeUrl(url: any): any;
    _downloadFile(url: any, fileName: any): Promise<any>;
    _getApiDownloadResponse(url: any): Promise<any>;
    _getApiReplayUrls(): string[];
    _getMessageType(val: any): "" | "Trade" | "Ask" | "Bid";
    _getSubProvider(val: any): "NASDAQ_BASIC" | "NONE" | "CTA_A" | "CTA_B" | "UTP" | "OTC" | "IEX";
    _parseTrade(bytes: any): {
        Type: string;
        Symbol: string;
        Price: number;
        Size: any;
        Timestamp: any;
        TotalVolume: any;
        SubProvider: string;
        MarketCenter: string;
        Condition: string;
    };
    _parseQuote(bytes: any): {
        Type: string;
        Symbol: string;
        Price: number;
        Size: any;
        Timestamp: any;
        SubProvider: string;
        MarketCenter: string;
        Condition: string;
    };
    _parseSocketMessage(data: any): Promise<void>;
    _join(symbol: any, tradesOnly: any): void;
    _leave(symbol: any): void;
    join(symbols: any, tradesOnly: any): Promise<void>;
    leave(symbols: any, ...args: any[]): void;
    stop(): Promise<void>;
    getTotalMsgCount(): number;
}
export function replayToCsv(outputFilePath: any, config: any, channels: any, tradesOnly: any, apiKey: any): Promise<void>;
export { IntrinioRealtime as RealtimeClient, IntrinioRealtimeReplayClient as ReplayClient };
